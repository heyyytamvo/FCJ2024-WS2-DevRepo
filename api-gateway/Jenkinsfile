pipeline {
    agent any

    stages {
        stage('SCM') {
            steps {
                checkout scm
            }
        }
        
        stage('Build') {
            when { 
                allOf {
                    changeset "api-gateway/**"
                    expression { 
                        sh(returnStatus: true, script: 'git diff --quiet api-gateway/') == 0
                    }
                }
            }
            environment {
                DOCKER_TAG = "api-gateway-${GIT_COMMIT.substring(0, 7)}"
                DOCKER_IMAGE = "heyyytamvo/eks"
            }
            steps {
                sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} -f api-gateway/Dockerfile ."
                sh "docker image ls | grep ${DOCKER_IMAGE}"
                withCredentials([usernamePassword(credentialsId: 'docker-hub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin'
                    sh "docker push ${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
                
                // Clean up to save disk space
                sh "docker image rm ${DOCKER_IMAGE}:${DOCKER_TAG}"
            }
        }

        stage('SonarQube Analysis') {
            when { 
                allOf {
                    changeset "api-gateway/**"
                    expression { 
                        sh(returnStatus: true, script: 'git diff --quiet api-gateway/') == 0
                    }
                }
            }
            
            steps {
                script {
                    def scannerHome = tool 'SonarScanner'
                    withSonarQubeEnv('jenkins') {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
        }
    }
}