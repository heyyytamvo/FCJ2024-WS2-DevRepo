pipeline {
    agent any

    environment {
        ACCOUNT_ID = "730335476156"
        REGION = "us-east-1"
        REGISTRY_DOMAIN = "https://${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com"
        DOCKERFILE_PATH = "api-gateway/Dockerfile"
        SERVICE = "api-gateway"
        DOCKER_TAG = "${SERVICE}-${GIT_COMMIT.substring(0, 7)}"
        DOCKER_IMAGE = "${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/fcjws2"
        CRE_ID = "aws-cre"
    }

    stages { 
        stage('SonarQube Analysis Source Code') {
            when { 
                allOf {
                    changeset "${SERVICE}/**"
                    expression { 
                        sh(returnStatus: true, script: 'git diff --quiet ${SERVICE}/') == 0
                    }
                }
            }

            steps {
                script {
                    def scannerHome = tool 'SonarScanner'
                    withSonarQubeEnv('jenkins') {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
        }

        stage('Build') {
            when { 
                allOf {
                    changeset "${SERVICE}/**"
                    expression { 
                        sh(returnStatus: true, script: 'git diff --quiet ${SERVICE}/') == 0
                    }
                }
            }
            steps {
                script{
                    app = docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}", "-f ${DOCKERFILE_PATH} .")
                }
            }
        }

        stage('Scan Image') {
            steps {
                script {
                    // Run Trivy to scan the Docker image
                    def trivyOutput = sh(script: "trivy image ${DOCKER_IMAGE}:${DOCKER_TAG}", returnStdout: true).trim()

                    // Display Trivy scan results
                    println trivyOutput

                    // Check if vulnerabilities were found
                    if (trivyOutput.contains("Total: 0")) {
                        echo "No vulnerabilities found in the Docker image."
                    } else {
                        echo "Vulnerabilities found in the Docker image."
                        // You can take further actions here based on your requirements
                        // For example, failing the build if vulnerabilities are found
                        // error "Vulnerabilities found in the Docker image."
                    }
                }
            }
        }

        stage('Deploy Image') {
            when { 
                allOf {
                    changeset "${SERVICE}/**"
                    expression { 
                        sh(returnStatus: true, script: 'git diff --quiet ${SERVICE}/') == 0
                    }
                }
            }
            steps{
                script{
                    docker.withRegistry("${REGISTRY_DOMAIN}", "ecr:us-east-1:${CRE_ID}") {
                        app.push()   
                    }
                }
            }
        }

        stage('Remove Resource') {
            steps{
                sh "docker image rm ${DOCKER_IMAGE}:${DOCKER_TAG}"
            }
        }
    }
}